!function () {
    var e = '/* Syntax highlighting for JSON objects */ .json-editor-blackbord {   background: #1c2833;   color: #fff;   font-size: 13px;   font-family: Menlo,Monaco,Consolas,"Courier New",monospace; } @media screen and (min-width: 1600px) {   .json-editor-blackbord {     font-size: 14px;   } }  ul.json-dict, ol.json-array {   list-style-type: none;   margin: 0 0 0 1px;   border-left: 1px dotted #525252;   padding-left: 2em; } .json-string {   /*color: #0B7500;*/   /*color: #BCCB86;*/   color: #0ad161; } .json-literal {   /*color: #1A01CC;*/   /*font-weight: bold;*/   color: #ff8c00; } .json-url {   color: #1e90ff; } .json-property {   color: #4fdee5;   line-height: 160%;   font-weight: 500; }  /* Toggle button */ a.json-toggle {   position: relative;   color: inherit;   text-decoration: none;   cursor: pointer; } a.json-toggle:focus {   outline: none; } a.json-toggle:before {   color: #aaa;   content: "\\25BC"; /* down arrow */   position: absolute;   display: inline-block;   width: 1em;   left: -1em; } a.json-toggle.collapsed:before {   transform: rotate(-90deg); /* Use rotated down arrow, prevents right arrow appearing smaller than down arrow in some browsers */   -ms-transform: rotate(-90deg);   -webkit-transform: rotate(-90deg); }   /* Collapsable placeholder links */ a.json-placeholder {   color: #aaa;   padding: 0 1em;   text-decoration: none;   cursor: pointer; } a.json-placeholder:hover {   text-decoration: underline; }',
        o = function (e) {
            var o = document.getElementsByTagName("head")[0], t = document.createElement("style");
            if (o.appendChild(t), t.styleSheet) t.styleSheet.disabled || (t.styleSheet.cssText = e); else try {
                t.innerHTML = e
            } catch (n) {
                t.innerText = e
            }
        };
    o(e)
}(), function (e) {
    /**
     * Check if arg is either an array with at least 1 element, or a dict with at least 1 key
     * @return boolean
     */
    function isCollapsable(arg) {
        return arg instanceof Object && Object.keys(arg).length > 0;
    }

    /**
     * Check if a string represents a valid url
     * @return boolean
     */
    function isUrl(string) {
        var regexp = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        return regexp.test(string);
    }

    /**
     * Transform a json object into html representation
     * @return string
     */
    function json2html(json, options,first=true) {

        var html = '';
        if (typeof json === 'string') {
            /* Escape tags */
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            if (isUrl(json))
                html += '<a href="' + json + '" class="json-string json-url">"' + json + '"</a>';
            else{
                if(first){
                    html += '<span class="json-string">' + json + '</span>';
                }else {
                    html += '<span class="json-string">\"' + json + '\"</span>';
                }
            }
        }
        else if (typeof json === 'number') {
            html += '<span class="json-literal json-literal-number">' + json + '</span>';
        }
        else if (typeof json === 'boolean') {
            html += '<span class="json-literal json-literal-boolean">' + json + '</span>';
        }
        else if (json === null) {
            html += '<span class="json-literal json-literal-null">null</span>';
        }
        else if (json instanceof Array) {
            if (json.length > 0) {
                html += '[<ol class="json-array">';
                for (var i = 0; i < json.length; ++i) {
                    html += '<li>';
                    /* Add toggle button if item is collapsable */
                    if (isCollapsable(json[i])) {
                        html += '<a href class="json-toggle"></a>';
                    }
                    html += json2html(json[i], options,false);
                    /* Add comma if item is not last */
                    if (i < json.length - 1) {
                        html += ',';
                    }
                    html += '</li>';
                }
                html += '</ol>]';
            }
            else {
                html += '[]';
            }
        }
        else if (typeof json === 'object') {
            var key_count = Object.keys(json).length;
            if (key_count > 0) {
                html += '{<ul class="json-dict">';
                for (var key in json) {
                    if (json.hasOwnProperty(key)) {
                        html += '<li>';
                        var keyRepr = options.withQuotes
                            ? '<span class="json-string json-property">"' + key + '"</span>'
                            : '<span class="json-property">' + key + '</span>';
                        /* Add toggle button if item is collapsable */
                        if (isCollapsable(json[key])) {
                            html += '<a href class="json-toggle"></a>' + keyRepr;
                        }
                        else {
                            html += keyRepr;
                        }
                        html += ': ' + json2html(json[key], options,false);
                        /* Add comma if item is not last */
                        if (--key_count > 0)
                            html += ',';
                        html += '</li>';
                    }
                }
                html += '</ul>}';
            }
            else {
                html += '{}';
            }
        }
        return html;
    }

    e.fn.jsonViewer = function(json, options) {
        options = options || {};

        /* jQuery chaining */
        return this.each(function() {

            /* Transform to HTML */
            var html = json2html(json, options);
            if (isCollapsable(json))
                html = '<a href class="json-toggle"></a>' + html;

            /* Insert HTML in target DOM element */
            $(this).html(html);

            /* Bind click on toggle buttons */
            $(this).off('click');
            $(this).on('click', 'a.json-toggle', function() {
                var target = $(this).toggleClass('collapsed').siblings('ul.json-dict, ol.json-array');
                target.toggle();
                if (target.is(':visible')) {
                    target.siblings('.json-placeholder').remove();
                }
                else {
                    var count = target.children('li').length;
                    var placeholder = count + (count > 1 ? ' items' : ' item');
                    target.after('<a href class="json-placeholder">' + placeholder + '</a>');
                }
                return false;
            });

            /* Simulate click on toggle button when placeholder is clicked */
            $(this).on('click', 'a.json-placeholder', function() {
                $(this).siblings('a.json-toggle').click();
                return false;
            });

            if (options.collapsed == true) {
                /* Trigger click to collapse all nodes */
                $(this).find('a.json-toggle').click();
            }
        });
    };
}(jQuery), function (e) {
    function o(e) {
        var o = {'"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t"};
        return e.replace(/["\\\b\f\n\r\t]/g, function (e) {
            return o[e]
        })
    }

    function t(e) {
        if ("string" == typeof e) return o(e);
        if ("object" == typeof e) for (var n in e) e[n] = t(e[n]); else if (Array.isArray(e)) for (var r = 0; r < e.length; r++) e[r] = t(e[r]);
        return e
    }

    function n(o, t, n) {
        n = n || {}, n.editable !== !1 && (n.editable = !0), this.$container = e(o), this.options = n, this.load(t)
    }

    n.prototype = {
        constructor: n, load: function (e) {
            this.$container.jsonViewer(t(e), {
                collapsed: this.options.defaultCollapsed,
                withQuotes: !0
            }).addClass("json-editor-blackbord").attr("contenteditable", !!this.options.editable)
        }, get: function () {
            try {
                return this.$container.find(".collapsed").click(), this.$container.text()
            } catch (e) {
                throw new Error(e)
            }
        }
    }, window.JsonEditor = n
}(jQuery);